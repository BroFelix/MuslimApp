// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"
import 'package:freezed_annotation/freezed_annotation.dart';

part 'prayer.freezed.dart';
part 'prayer.g.dart';

@freezed
class PrayerResponse with _$PrayerResponse {
  const factory PrayerResponse({
    required int code,
    required String status,
    List<Datum>? data,
  }) = _PrayerResponse;

  factory PrayerResponse.fromJson(Map<String, Object?> json) => _$PrayerResponseFromJson(json);
}

@freezed
class Datum with _$Datum {
  const factory Datum({
    required Map<String, String> timings,
    required Date date,
    required Meta meta,
  }) = _Datum;
  factory Datum.fromJson(Map<String, Object?> json) => _$DatumFromJson(json);
}

@freezed
class Date with _$Date {
  const factory Date({
    required String readable,
    required String timestamp,
    required Gregorian gregorian,
    required Hijri hijri,
  }) = _Date;
  factory Date.fromJson(Map<String, Object?> json) => _$DateFromJson(json);
}

@freezed
class Gregorian with _$Gregorian {
  const factory Gregorian({
    required String date,
    required String format,
    required String day,
    required GregorianWeekday weekday,
    required GregorianMonth month,
    required String year,
    required Designation designation,
  }) = _Gregorian;
  factory Gregorian.fromJson(Map<String, Object?> json) => _$GregorianFromJson(json);
}

@freezed
class Designation with _$Designation {
  const factory Designation({
    required String abbreviated,
    required String expanded,
  }) = _Designation;
  factory Designation.fromJson(Map<String, Object?> json) => _$DesignationFromJson(json);
}

enum Abbreviated { AD, AH }

enum Expanded { ANNO_DOMINI, ANNO_HEGIRAE }

@freezed
class GregorianMonth with _$GregorianMonth {
  const factory GregorianMonth({
    required int number,
    required String en,
  }) = _GregorianMonth;
  factory GregorianMonth.fromJson(Map<String, Object?> json) => _$GregorianMonthFromJson(json);
}

@freezed
class GregorianWeekday with _$GregorianWeekday {
  const factory GregorianWeekday({
    required String en,
  }) = _GregorianWeekday;
  factory GregorianWeekday.fromJson(Map<String, Object?> json) => _$GregorianWeekdayFromJson(json);
}

@freezed
class Hijri with _$Hijri {
  const factory Hijri({
    required String date,
    required String format,
    required String day,
    required HijriWeekday weekday,
    required HijriMonth month,
    required String year,
    required Designation designation,
    required List<String> holidays,
  }) = _Hijri;
  factory Hijri.fromJson(Map<String, Object?> json) => _$HijriFromJson(json);
}

@freezed
class HijriMonth with _$HijriMonth {
  const factory HijriMonth({
    required int number,
    required String en,
    required String ar,
  }) = _HijriMonth;
  factory HijriMonth.fromJson(Map<String, Object?> json) => _$HijriMonthFromJson(json);
}

@freezed
class HijriWeekday with _$HijriWeekday {
  const factory HijriWeekday({
    required String en,
    required String ar,
  }) = _HijriWeekday;
  factory HijriWeekday.fromJson(Map<String, Object?> json) => _$HijriWeekdayFromJson(json);
}

@freezed
class Meta with _$Meta {
  const factory Meta({
    required double latitude,
    required double longitude,
    required String timezone,
    required Method method,
    required LatitudeAdjustmentMethod latitudeAdjustmentMethod,
    required String midnightMode,
    required String school,
    required Map<String, int?> offset,
  }) = _Meta;
  factory Meta.fromJson(Map<String, Object?> json) => _$MetaFromJson(json);
}

enum LatitudeAdjustmentMethod { ANGLE_BASED }

@freezed
class Method with _$Method {
  const factory Method({
    required int? id,
    required String name,
    required Params params,
    required Location location,
  }) = _Method;
  factory Method.fromJson(Map<String, Object?> json) => _$MethodFromJson(json);
}

@freezed
class Location with _$Location {
  const factory Location({
    required double latitude,
    required double longitude,
  }) = _Location;
  factory Location.fromJson(Map<String, Object?> json) => _$LocationFromJson(json);
}

@freezed
class Params with _$Params {
  const factory Params({
    required int? fajr,
    required int? isha,
  }) = _Params;
  factory Params.fromJson(Map<String, Object?> json) => _$ParamsFromJson(json);
}
